# -*- coding: utf-8 -*-
# vim: set fileencoding=utf-8

# GUI module generated by PAGE version 4.5
# In conjunction with Tcl version 8.6
#    Jul 08, 2015 02:13:13 PM
import os
import sys
import utils
import logger

from twisted.internet import reactor

# TODO: use ttk (themed widgets)
try:
    from Tkinter import *
    py3 = 0
except ImportError:
    from tkinter import *
    py3 = 1

import tkMessageBox

import PIL.Image
import PIL.ImageTk

# XXX: should import first or later it will override ttk
from idlelib.ToolTip import *

log = logger.get(__name__)


def set_Tk_var():
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global var_chk_record, var_chk_repeat
    var_chk_record = IntVar()
    var_chk_repeat = IntVar()


def vp_start_gui():
    """ Starting point when module is the main routine. """
    global val, w, root
    root = Tk()
    w = IPAGUI(root)
    root.mainloop()

def create_GUI():
    """ Starting point when module is the main routine. """
    global val, w, root
    root = Tk()
    w = IPAGUI(root)
    return (root, w)

def get_img(img, size=None):
    path = os.path.join(utils.get_dir(__file__), 'img', img)
    img = PIL.Image.open(path)
    if size and (size < img.size):
        log.debug("Resizing %s; requested size: %s, orig image size: %s", img.filename, size, img.size)
        img = img.resize(size, PIL.Image.LANCZOS)
    return PIL.ImageTk.PhotoImage(img)
    

def set_icon(window, icon):
    this_dir = utils.get_dir(__file__)
    window.wm_iconbitmap(os.path.join(this_dir, 'img', icon))

def destroy_GUI():
    global w
    w.destroy()
    w = None


class IPAGUI():

    _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
    _fgcolor = '#000000'  # X11 color: 'black'

    def __init__(self, master=None):

        set_Tk_var()

        master.title('IPA')
        master.geometry("256x134")
        master.resizable(0,0)
        master.wm_attributes("-topmost", 1)
        set_icon(master, 'record.ico')

        master.configure(background=self._bgcolor)
        master.configure(highlightbackground=self._bgcolor)
        master.configure(highlightcolor="black")

        #######################################################################
        self.Frame1 = Frame(master)
        self.Frame1.place(x=10, y=10, height=88, width=236)
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(background=self._bgcolor)
        self.Frame1.configure(highlightbackground=self._bgcolor)
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=235)

        #######################################################################                
        self.chkRecord = Checkbutton(self.Frame1)
        self.chkRecord.place(x=10, y=10, width=64, height=64)
        self.chkRecord.configure(state='disabled')
        #
        self.chkRecord.img = get_img('record.png', (56,56))
        self.chkRecord.configure(selectimage=self.chkRecord.img)
        self.chkRecord.configure(image=self.chkRecord.img)
        #
        self.chkRecord.configure(selectcolor=self._bgcolor)
        self.chkRecord.configure(foreground=self._fgcolor)
        self.chkRecord.configure(background=self._bgcolor)
        self.chkRecord.configure(activebackground=self._bgcolor)
        self.chkRecord.configure(activeforeground=self._fgcolor)
        #self.chkRecord.configure(disabledforeground="#a3a3a3")
        self.chkRecord.configure(highlightcolor="black")
        self.chkRecord.configure(highlightbackground=self._bgcolor)
        #
        self.chkRecord.configure(indicatoron="0")
        self.chkRecord.configure(offrelief="ridge")
        self.chkRecord.configure(overrelief="raised")
        self.chkRecord.configure(variable=var_chk_record)
        self.chkRecord.configure(command=self.evt_chkRecord)

        

        #######################################################################
        self.chkRepeat = Checkbutton(self.Frame1)
        self.chkRepeat.place(x=84, y=10, width=64, height=64)
        #
        self.chkRepeat.img1 = get_img('repeat.png', (56,56))
        self.chkRepeat.img2 = get_img('repeat_bw.png', (56,56))
        self.chkRepeat.configure(selectimage=self.chkRepeat.img1)
        self.chkRepeat.configure(image=self.chkRepeat.img2)
        #
        self.chkRepeat.configure(selectcolor=self._bgcolor)
        self.chkRepeat.configure(foreground=self._fgcolor)
        self.chkRepeat.configure(background=self._bgcolor)
        self.chkRepeat.configure(activebackground=self._bgcolor)
        self.chkRepeat.configure(disabledforeground="#a3a3a3")
        self.chkRepeat.configure(highlightcolor="black")
        self.chkRepeat.configure(highlightbackground=self._bgcolor)

        self.chkRepeat.configure(indicatoron="0")
        #self.chkRepeat.configure(borderwidth=2)
        self.chkRepeat.configure(offrelief="flat")
        self.chkRepeat.configure(overrelief="raised")
        self.chkRepeat.configure(variable=var_chk_repeat)
        self.chkRepeat.configure(command=self.evt_chkRepeat)
                
        #######################################################################
        self.cmdPrefs = Button(self.Frame1)
        self.cmdPrefs.place(x=158, y=10, height=64, width=64)
        #
        self.cmdPrefs.img = get_img('prefs.png', (56,56))
        self.cmdPrefs.configure(image=self.cmdPrefs.img)
        #
        self.cmdPrefs.configure(activebackground=self._bgcolor)
        self.cmdPrefs.configure(activeforeground=self._fgcolor)
        self.cmdPrefs.configure(background=self._bgcolor)
        self.cmdPrefs.configure(disabledforeground = "#a3a3a3")
        self.cmdPrefs.configure(foreground=self._fgcolor)
        self.cmdPrefs.configure(highlightbackground = self._bgcolor)
        self.cmdPrefs.configure(highlightcolor="black")
        self.cmdPrefs.configure(text="Nuostatos")
        self.cmdPrefs.configure(command=self.evt_cmdPrefs)
                
        #######################################################################
        self.txtStatus = Text(master)
        self.txtStatus.place(x=10, y=105, height=20, width=235)
        self.txtStatus.configure(padx=3)
        self.txtStatus.configure(background="white")
        self.txtStatus.configure(font="TkTextFont")
        self.txtStatus.configure(foreground="black")
        self.txtStatus.configure(highlightbackground="#d9d9d9")
        self.txtStatus.configure(highlightcolor="black")
        self.txtStatus.configure(insertbackground="black")
        self.txtStatus.configure(selectbackground="#c4c4c4")
        self.txtStatus.configure(selectforeground="black")
        #self.txtStatus.configure(state="disabled")
        self.txtStatus.configure(wrap=WORD)

        # Bindings
        #self.chkRecord.bind('<Button-1>', self.evt_chkRecord)

        # Tooltips
        MyToolTip(self.chkRecord, "Klausyti balso komandos")
        MyToolTip(self.chkRepeat, "Nuolat kartoti balso komandų klausymąsi")
        MyToolTip(self.cmdPrefs, "Programos nuostatos (atveriami tinklalapiai)")
        

    def evt_RecognizerState(self, status):
        """ Recognizer state update callback """

        if status == 'listening':
            self.chkRecord['selectcolor'] = 'SeaGreen1'
            self.chkRecord.select()
            self.showStatus('atpažintuvas klauso')
            
        elif status == 'speech-started':
            # XXX, TODO: doesn't work (checkbutton widget is not updated)
            #self.flash, self.chkRecord, duration=3000)
            self.showStatus('aptikta šneka')
            
        elif status in ('stopped', 'timeout'):
            self.flash_stop(self.chkRecord)
            self.chkRecord.deselect()
            self.chkRepeat['selectcolor'] = self._bgcolor
            self.showStatus('atpažintuvas sustabdytas')

    def evt_Recognition(self, data):
        text = data['text']
        command = data['command']
        cmd_arg = data['cmd-arg']

        if text:
            self.showStatus("%s (%s)" % (text, cmd_arg))
        else:
            self.showStatus("neatpažinta komanda")
        
            
    def evt_chkRecord(self, e=None):
        log.debug("Record checkbuton clicked; value: %i, event: %s", var_chk_record.get(), e)
        if var_chk_record.get():
            self.client.startRecognizer(loop=var_chk_repeat.get())
        else:
            self.client.stopRecognizer()

    def evt_chkRepeat(self, e=None):
        log.debug("Repeat checkbuton clicked; value: %i, event: %s", var_chk_repeat.get(), e)
        if self.client.recording and not var_chk_repeat.get():
            self.client.stopRecognizer()

    def evt_cmdPrefs(self, e=None):
        log.debug("Settings button clicked; value: event: %s", e)
        tkMessageBox.showinfo(
            "Dėmesio",
            "Čia turėtų būti atveriamų tinklalapių sąrankos dialogas. "
            "Kol kas nerealizuota.")
        
            
            
    def showStatus(self, status):
        self.txtStatus.delete(1.0, END)
        self.txtStatus.insert(INSERT, status)
        #self.flash(self.txtStatus, duration=3000)

    def flash(self, widget, duration=None):
        widget.do_flash = True
        self._flash(widget)
        if duration:
            widget.after(duration, self.flash_stop, widget)

    def _flash(self, widget):
        bg = widget.cget("background")
        fg = widget.cget("foreground")
        log.debug("bg: %s, fg: %s", bg, fg)
        widget.configure(background=fg, foreground=bg)
        widget.update()
        root.update()
        if widget.do_flash:
            widget.after(200, self._flash, widget)

    def flash_stop(self, widget):
        widget.do_flash = False
    
    def register(self, client):
        self.client = client

        
        
class MyToolTip(ToolTipBase):
    def __init__(self, button, text):
        ToolTipBase.__init__(self, button)
        self.text = text

    def showcontents(self):
        # XXX: tooltips within -topmost root window won't show
        # (need to set tooltip windows -topmost)
        if not self.tipwindow.attributes("-topmost"):
            self.tipwindow.wm_attributes("-topmost", 1)
        ToolTipBase.showcontents(self, self.text)

        
if __name__ == '__main__':
    vp_start_gui()



